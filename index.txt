<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>跑步生理韌性分析平台</title>
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+TC:wght@300;400;500;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/regression@2.0.1/dist/regression.min.js"></script>
    <style>
        :root {
            --primary: #3498db;
            --secondary: #2c3e50;
            --accent: #e74c3c;
            --light: #ecf0f1;
            --dark: #34495e;
            --success: #2ecc71;
            --warning: #f39c12;
            --border-radius: 10px;
            --box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Noto Sans TC', sans-serif;
            background: linear-gradient(135deg, #1a2980, #26d0ce);
            color: var(--light);
            min-height: 100vh;
            padding: 20px;
            line-height: 1.6;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        
        header {
            text-align: center;
            padding: 30px 0;
            margin-bottom: 30px;
            animation: fadeIn 1s ease-in-out;
        }
        
        header h1 {
            font-size: 2.8rem;
            margin-bottom: 15px;
            font-weight: 700;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
        }
        
        header p {
            font-size: 1.2rem;
            max-width: 800px;
            margin: 0 auto;
            color: rgba(255, 255, 255, 0.9);
        }
        
        .card-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 25px;
            margin-bottom: 30px;
        }
        
        .card {
            background: rgba(255, 255, 255, 0.95);
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            padding: 25px;
            color: var(--dark);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        
        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
        }
        
        .card-title {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 2px solid var(--primary);
            color: var(--secondary);
        }
        
        .card-title i {
            margin-right: 12px;
            font-size: 1.8rem;
            color: var(--primary);
        }
        
        .data-table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }
        
        .data-table th, .data-table td {
            padding: 12px 15px;
            text-align: center;
            border-bottom: 1px solid #ddd;
        }
        
        .data-table th {
            background-color: var(--primary);
            color: white;
            font-weight: 500;
        }
        
        .data-table tr:nth-child(even) {
            background-color: #f8f9fa;
        }
        
        .data-table tr:hover {
            background-color: #e9f7fe;
        }
        
        .btn {
            background-color: var(--primary);
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 50px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 500;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            justify-content: center;
        }
        
        .btn i {
            margin-right: 8px;
        }
        
        .btn:hover {
            background-color: #2980b9;
            transform: translateY(-2px);
        }
        
        .btn-block {
            display: block;
            width: 100%;
        }
        
        .btn-warning {
            background-color: var(--warning);
        }
        
        .btn-warning:hover {
            background-color: #e67e22;
        }
        
        .btn-success {
            background-color: var(--success);
        }
        
        .btn-success:hover {
            background-color: #27ae60;
        }
        
        .input-group {
            margin-bottom: 20px;
        }
        
        .input-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: var(--dark);
        }
        
        .input-group input, .input-group select {
            width: 100%;
            padding: 12px 15px;
            border: 1px solid #ddd;
            border-radius: var(--border-radius);
            font-size: 1rem;
            transition: border-color 0.3s;
        }
        
        .input-group input:focus, .input-group select:focus {
            border-color: var(--primary);
            outline: none;
            box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.2);
        }
        
        .result-box {
            background: #f8f9fa;
            border-left: 4px solid var(--primary);
            padding: 15px;
            margin: 15px 0;
            border-radius: 0 var(--border-radius) var(--border-radius) 0;
        }
        
        .result-box h3 {
            color: var(--primary);
            margin-bottom: 10px;
        }
        
        .chart-container {
            position: relative;
            height: 300px;
            margin: 25px 0;
        }
        
        .resilience-meter {
            display: flex;
            height: 30px;
            background: linear-gradient(to right, #2ecc71, #f1c40f, #e74c3c);
            border-radius: 15px;
            overflow: hidden;
            margin: 25px 0;
            position: relative;
        }
        
        .resilience-level {
            position: absolute;
            top: -30px;
            font-weight: bold;
            text-align: center;
            width: 80px;
            left: 0;
            transform: translateX(-50%);
        }
        
        .resilience-level:nth-child(2) {
            left: 20%;
        }
        
        .resilience-level:nth-child(3) {
            left: 40%;
        }
        
        .resilience-level:nth-child(4) {
            left: 60%;
        }
        
        .resilience-level:nth-child(5) {
            left: 80%;
        }
        
        .resilience-level:nth-child(6) {
            left: 100%;
        }
        
        .indicator {
            position: absolute;
            top: -10px;
            width: 20px;
            height: 20px;
            background: var(--secondary);
            border-radius: 50%;
            transform: translateX(-50%);
            z-index: 10;
        }
        
        .training-plan {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }
        
        .plan-card {
            background: #f8f9fa;
            border-radius: var(--border-radius);
            padding: 20px;
            border-top: 4px solid var(--primary);
        }
        
        .plan-card h4 {
            color: var(--primary);
            margin-bottom: 15px;
            display: flex;
            align-items: center;
        }
        
        .plan-card h4 i {
            margin-right: 10px;
        }
        
        .plan-card ul {
            padding-left: 20px;
        }
        
        .plan-card li {
            margin-bottom: 10px;
        }
        
        footer {
            text-align: center;
            padding: 30px 0;
            margin-top: 40px;
            color: rgba(255, 255, 255, 0.7);
            border-top: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        @media (max-width: 768px) {
            .card-grid {
                grid-template-columns: 1fr;
            }
            
            header h1 {
                font-size: 2.2rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1><i class="fas fa-running"></i> 跑步生理韌性分析平台</h1>
            <p>基於運動生理學最新研究，分析您的跑步表現、預測比賽成績並優化訓練計劃</p>
        </header>
        
        <div class="card-grid">
            <!-- 數據輸入卡片 -->
            <div class="card">
                <div class="card-title">
                    <i class="fas fa-table"></i>
                    <h2>跑步數據記錄</h2>
                </div>
                
                <table class="data-table">
                    <thead>
                        <tr>
                            <th>距離 (公里)</th>
                            <th>時間 (分鐘)</th>
                            <th>日期</th>
                            <th>操作</th>
                        </tr>
                    </thead>
                    <tbody id="records-table">
                        <tr>
                            <td><input type="number" class="distance-input" step="0.1" min="0" placeholder="距離" value="5"></td>
                            <td><input type="number" class="time-input" step="0.1" min="0" placeholder="時間" value="25"></td>
                            <td><input type="date" class="date-input" value="2023-06-01"></td>
                            <td><button class="btn btn-success add-record"><i class="fas fa-plus"></i> 添加</button></td>
                        </tr>
                    </tbody>
                </table>
                
                <button class="btn btn-block analyze-btn">
                    <i class="fas fa-chart-line"></i> 分析跑步數據
                </button>
                
                <div class="input-group">
                    <label for="target-distance">預測距離 (公里):</label>
                    <input type="number" id="target-distance" step="0.1" min="0" placeholder="輸入預測距離" value="21.1">
                </div>
            </div>
            
            <!-- 分析結果卡片 -->
            <div class="card">
                <div class="card-title">
                    <i class="fas fa-clipboard-list"></i>
                    <h2>生理韌性分析</h2>
                </div>
                
                <div class="result-box">
                    <h3>疲勞因子 (SDI) 分析</h3>
                    <p>您的疲勞因子 (SDI): <strong id="sdi-value">--</strong></p>
                    <p>生理韌性評估: <strong id="resilience-level">--</strong></p>
                    <p id="resilience-desc">請輸入至少兩次跑步記錄進行分析</p>
                    
                    <div class="resilience-meter">
                        <div class="resilience-level">精英</div>
                        <div class="resilience-level">優秀</div>
                        <div class="resilience-level">良好</div>
                        <div class="resilience-level">一般</div>
                        <div class="resilience-level">待提高</div>
                        <div class="indicator" id="resilience-indicator" style="left: 0%;"></div>
                    </div>
                </div>
                
                <div class="result-box">
                    <h3>比賽成績預測</h3>
                    <p>5公里: <strong id="pred-5k">--</strong></p>
                    <p>10公里: <strong id="pred-10k">--</strong></p>
                    <p>半程馬拉松: <strong id="pred-half">--</strong></p>
                    <p>全程馬拉松: <strong id="pred-full">--</strong></p>
                    <p id="target-prediction">目標距離: <strong id="target-result">--</strong></p>
                </div>
            </div>
        </div>
        
        <div class="card-grid">
            <!-- 可視化分析卡片 -->
            <div class="card">
                <div class="card-title">
                    <i class="fas fa-chart-bar"></i>
                    <h2>表現曲線分析</h2>
                </div>
                
                <div class="chart-container">
                    <canvas id="performance-chart"></canvas>
                </div>
                
                <div class="chart-container">
                    <canvas id="pace-chart"></canvas>
                </div>
            </div>
            
            <!-- 訓練建議卡片 -->
            <div class="card">
                <div class="card-title">
                    <i class="fas fa-dumbbell"></i>
                    <h2>個性化訓練建議</h2>
                </div>
                
                <div class="result-box">
                    <h3>配速訓練區間</h3>
                    <p>高強度區間 (≥VT2): <strong id="vt2-pace">--</strong></p>
                    <p>中等強度區間 (VT1-VT2): <strong id="vt1-vt2">--</strong></p>
                    <p>低強度區間 (<VT1): <strong id="below-vt1">--</strong></p>
                </div>
                
                <h3>訓練計劃</h3>
                <div class="training-plan" id="training-plan-container">
                    <div class="result-box">
                        <p>請先輸入跑步數據以生成訓練建議</p>
                    </div>
                </div>
                
                <div class="result-box" style="margin-top: 20px;">
                    <h3>營養與恢復建議</h3>
                    <p id="nutrition-advice">請先輸入跑步數據以生成建議</p>
                </div>
            </div>
        </div>
        
        <footer>
            <p>基於運動生理學最新研究 | Jones (2024) 生理韌性模型 | Riegel (1981) 冪律模型</p>
            <p>© 2023 跑步生理韌性分析平台 | 運動表現優化系統</p>
        </footer>
    </div>

    <script>
        // 跑步數據存儲
        let runningRecords = [];
        let performanceChart, paceChart;
        
        // 初始化圖表
        document.addEventListener('DOMContentLoaded', function() {
            initCharts();
            
            // 添加示例記錄
            addRecord(5, 25, "2023-06-01");
            addRecord(10, 52, "2023-06-08");
            addRecord(21.1, 115, "2023-06-15");
            updateRecordsTable();
            
            // 添加記錄功能
            document.querySelector('.add-record').addEventListener('click', function() {
                const distance = parseFloat(document.querySelector('.distance-input').value);
                const time = parseFloat(document.querySelector('.time-input').value);
                const date = document.querySelector('.date-input').value;
                
                if (distance && time && date) {
                    addRecord(distance, time, date);
                    document.querySelector('.distance-input').value = '';
                    document.querySelector('.time-input').value = '';
                    updateRecordsTable();
                } else {
                    alert("請填寫所有字段");
                }
            });
            
            // 分析數據功能
            document.querySelector('.analyze-btn').addEventListener('click', function() {
                if (runningRecords.length < 2) {
                    alert("需要至少兩次跑步記錄才能進行分析");
                    return;
                }
                
                analyzeData();
            });
        });
        
        // 添加跑步記錄
        function addRecord(distance, time, date) {
            runningRecords.push({
                distance: distance,
                time: time,
                date: date,
                pace: time / distance
            });
        }
        
        // 更新記錄表格
        function updateRecordsTable() {
            const table = document.getElementById('records-table');
            // 清除舊行（保留輸入行）
            while (table.rows.length > 1) {
                table.deleteRow(1);
            }
            
            // 添加記錄行
            runningRecords.forEach(record => {
                const row = table.insertRow(1);
                row.innerHTML = `
                    <td>${record.distance.toFixed(1)}</td>
                    <td>${record.time.toFixed(1)}</td>
                    <td>${record.date}</td>
                    <td><button class="btn btn-warning remove-record"><i class="fas fa-trash"></i> 刪除</button></td>
                `;
            });
            
            // 添加刪除事件監聽器
            document.querySelectorAll('.remove-record').forEach(button => {
                button.addEventListener('click', function() {
                    const rowIndex = this.closest('tr').rowIndex;
                    runningRecords.splice(rowIndex - 1, 1);
                    updateRecordsTable();
                });
            });
        }
        
        // 初始化圖表
        function initCharts() {
            // 性能曲線圖
            const performanceCtx = document.getElementById('performance-chart').getContext('2d');
            performanceChart = new Chart(performanceCtx, {
                type: 'scatter',
                data: {
                    datasets: [{
                        label: '實際跑步成績',
                        data: [],
                        backgroundColor: '#3498db',
                        pointRadius: 8,
                        pointHoverRadius: 10
                    }, {
                        label: '預測表現曲線',
                        data: [],
                        borderColor: '#e74c3c',
                        backgroundColor: 'rgba(231, 76, 60, 0.1)',
                        borderWidth: 3,
                        pointRadius: 0,
                        fill: true,
                        showLine: true,
                        type: 'line'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        title: {
                            display: true,
                            text: '跑步表現曲線',
                            font: {
                                size: 16,
                                weight: 'bold'
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const value = context.parsed.y;
                                    const hours = Math.floor(value / 60);
                                    const minutes = Math.floor(value % 60);
                                    const seconds = Math.floor((value * 60) % 60);
                                    return `${context.dataset.label}: ${hours > 0 ? hours + ':' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
                                }
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: '時間 (分鐘)'
                            },
                            grid: {
                                color: 'rgba(0, 0, 0, 0.1)'
                            }
                        },
                        x: {
                            title: {
                                display: true,
                                text: '距離 (公里)'
                            },
                            grid: {
                                color: 'rgba(0, 0, 0, 0.1)'
                            }
                        }
                    }
                }
            });
            
            // 配速區間圖
            const paceCtx = document.getElementById('pace-chart').getContext('2d');
            paceChart = new Chart(paceCtx, {
                type: 'bar',
                data: {
                    labels: ['高強度區間', '中等強度區間', '低強度區間'],
                    datasets: [{
                        label: '配速 (分鐘/公里)',
                        data: [0, 0, 0],
                        backgroundColor: [
                            'rgba(231, 76, 60, 0.7)',
                            'rgba(241, 196, 15, 0.7)',
                            'rgba(46, 204, 113, 0.7)'
                        ],
                        borderColor: [
                            'rgb(231, 76, 60)',
                            'rgb(241, 196, 15)',
                            'rgb(46, 204, 113)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        title: {
                            display: true,
                            text: '配速訓練區間分析',
                            font: {
                                size: 16,
                                weight: 'bold'
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const value = context.parsed.y;
                                    const minutes = Math.floor(value);
                                    const seconds = Math.floor((value - minutes) * 60);
                                    return `配速: ${minutes}:${seconds < 10 ? '0' : ''}${seconds}/km`;
                                }
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: '配速 (分鐘/公里)'
                            },
                            grid: {
                                color: 'rgba(0, 0, 0, 0.1)'
                            }
                        }
                    }
                }
            });
        }
        
        // 分析數據
        function analyzeData() {
            // 1. 計算SDI（疲勞因子）
            const sdi = calculateSDI();
            
            // 2. 更新生理韌性分析
            updateResilienceAnalysis(sdi);
            
            // 3. 預測比賽成績
            const predictions = predictPerformances(sdi);
            
            // 4. 更新圖表
            updateCharts();
            
            // 5. 生成訓練建議
            generateTrainingPlan(sdi);
        }
        
        // 計算疲勞因子 (SDI)
        function calculateSDI() {
            // 獲取最短和最長距離的記錄
            const sortedRecords = [...runningRecords].sort((a, b) => a.distance - b.distance);
            const shortest = sortedRecords[0];
            const longest = sortedRecords[sortedRecords.length - 1];
            
            // SDI = log(T2/T1) / log(D2/D1)
            const sdi = Math.log(longest.time / shortest.time) / Math.log(longest.distance / shortest.distance);
            
            return sdi;
        }
        
        // 更新生理韌性分析
        function updateResilienceAnalysis(sdi) {
            document.getElementById('sdi-value').textContent = sdi.toFixed(4);
            
            let level, desc, indicatorPos;
            
            if (sdi <= 1.06) {
                level = "精英級";
                desc = "生理韌性極佳，能有效維持長距離配速";
                indicatorPos = "10%";
            } else if (sdi <= 1.07) {
                level = "優秀";
                desc = "生理韌性良好，適合長距離賽事";
                indicatorPos = "30%";
            } else if (sdi <= 1.08) {
                level = "良好";
                desc = "生理韌性中等，有提升空間";
                indicatorPos = "50%";
            } else if (sdi <= 1.10) {
                level = "一般";
                desc = "建議加強有氧耐力訓練";
                indicatorPos = "70%";
            } else {
                level = "待提高";
                desc = "需針對性訓練提升生理韌性";
                indicatorPos = "90%";
            }
            
            document.getElementById('resilience-level').textContent = level;
            document.getElementById('resilience-desc').textContent = desc;
            document.getElementById('resilience-indicator').style.left = indicatorPos;
        }
        
        // 預測比賽成績
        function predictPerformances(sdi) {
            // 獲取最短距離記錄作為參考
            const refRecord = [...runningRecords].sort((a, b) => a.distance - b.distance)[0];
            const refDistance = refRecord.distance;
            const refTime = refRecord.time;
            
            // 預測函數：T2 = T1 * (D2/D1)^SDI
            const predictTime = (distance) => {
                return refTime * Math.pow(distance / refDistance, sdi);
            };
            
            // 預測常見距離
            const distances = [5, 10, 21.1, 42.2];
            const predictions = {};
            
            distances.forEach(dist => {
                predictions[dist] = predictTime(dist);
            });
            
            // 預測用戶指定的距離
            const targetDistance = parseFloat(document.getElementById('target-distance').value) || 21.1;
            const targetPrediction = predictTime(targetDistance);
            
            // 更新UI
            document.getElementById('pred-5k').textContent = formatTime(predictions[5]);
            document.getElementById('pred-10k').textContent = formatTime(predictions[10]);
            document.getElementById('pred-half').textContent = formatTime(predictions[21.1]);
            document.getElementById('pred-full').textContent = formatTime(predictions[42.2]);
            
            document.getElementById('target-result').textContent = 
                `${formatTime(targetPrediction)} (配速: ${formatPace(targetPrediction/targetDistance)}/km)`;
            
            document.getElementById('target-prediction').innerHTML = 
                `目標距離 (${targetDistance.toFixed(1)}公里): <strong id="target-result">${formatTime(targetPrediction)}</strong>`;
            
            return predictions;
        }
        
        // 更新圖表
        function updateCharts() {
            // 更新表現曲線圖
            const actualData = runningRecords.map(record => ({
                x: record.distance,
                y: record.time
            }));
            
            // 創建預測數據
            const maxDistance = Math.max(...runningRecords.map(r => r.distance), 42.2);
            const predictionData = [];
            
            for (let dist = 1; dist <= maxDistance; dist += 1) {
                // 使用冪律模型進行預測
                const sortedRecords = [...runningRecords].sort((a, b) => a.distance - b.distance);
                const refRecord = sortedRecords[0];
                const sdi = calculateSDI();
                
                const predictedTime = refRecord.time * Math.pow(dist / refRecord.distance, sdi);
                predictionData.push({
                    x: dist,
                    y: predictedTime
                });
            }
            
            performanceChart.data.datasets[0].data = actualData;
            performanceChart.data.datasets[1].data = predictionData;
            performanceChart.update();
            
            // 更新配速圖
            const avgPace = runningRecords.reduce((sum, record) => sum + record.pace, 0) / runningRecords.length;
            
            paceChart.data.datasets[0].data = [
                avgPace * 0.9,  // 高強度配速
                avgPace * 1.0,   // 中等強度配速
                avgPace * 1.1    // 低強度配速
            ];
            
            document.getElementById('vt2-pace').textContent = formatPace(avgPace * 0.9);
            document.getElementById('vt1-vt2').textContent = `${formatPace(avgPace)} - ${formatPace(avgPace * 0.9)}`;
            document.getElementById('below-vt1').textContent = `慢於${formatPace(avgPace)}`;
            
            paceChart.update();
        }
        
        // 生成訓練計劃
        function generateTrainingPlan(sdi) {
            const container = document.getElementById('training-plan-container');
            container.innerHTML = '';
            
            let focus, workouts;
            
            if (sdi <= 1.07) {
                focus = "提高專項耐力與速度維持能力";
                workouts = [
                    "長距離節奏跑: 15-20km @ VT1配速",
                    "間歇訓練: 6-8 × 1000m @ 目標5K配速，恢復時間1:1",
                    "馬拉松配速跑: 12-15km @ 目標馬拉松配速"
                ];
            } else if (sdi <= 1.09) {
                focus = "提升有氧能力與疲勞抵抗";
                workouts = [
                    "漸進長跑: 18-22km (最後5km @ VT2配速)",
                    "乳酸閾值訓練: 3 × 15分鐘 @ VT2配速，恢復5分鐘慢跑",
                    "山地重複跑: 8-10 × 3分鐘上坡 @ 高強度"
                ];
            } else {
                focus = "加強基礎有氧能力與跑步經濟性";
                workouts = [
                    "基礎長跑: 60-90分鐘 @ 輕鬆配速",
                    "法特萊克訓練: 45分鐘變速跑 (1-2分鐘快/慢交替)",
                    "力量耐力訓練: 6-8 × 800m @ 目標10K配速"
                ];
            }
            
            const planDiv = document.createElement('div');
            planDiv.innerHTML = `
                <div class="plan-card">
                    <h4><i class="fas fa-bullseye"></i> 訓練重點</h4>
                    <p>${focus}</p>
                </div>
                <div class="plan-card">
                    <h4><i class="fas fa-dumbbell"></i> 推薦訓練</h4>
                    <ul>
                        ${workouts.map(w => `<li>${w}</li>`).join('')}
                    </ul>
                </div>
                <div class="plan-card">
                    <h4><i class="fas fa-calendar-alt"></i> 訓練頻率</h4>
                    <ul>
                        <li>高強度訓練: 每週1次</li>
                        <li>中等強度訓練: 每週1-2次</li>
                        <li>低強度訓練: 每週2-3次</li>
                        <li>休息日: 每週1-2天</li>
                    </ul>
                </div>
            `;
            
            container.appendChild(planDiv);
            
            // 營養建議
            document.getElementById('nutrition-advice').innerHTML = `
                <p><strong>訓練前:</strong> 1-2g/kg碳水 + 0.2g/kg蛋白質 (訓練前1-2小時)</p>
                <p><strong>訓練中:</strong> 每小時60-90g碳水 + 500ml電解質 (長於60分鐘的訓練)</p>
                <p><strong>恢復期:</strong> 3:1碳水蛋白質比例 (1.2g/kg碳水 + 0.4g/kg蛋白質，訓練後30分鐘內)</p>
            `;
        }
        
        // 格式化時間 (分鐘轉 h:mm:ss)
        function formatTime(minutes) {
            const totalSeconds = minutes * 60;
            const hours = Math.floor(totalSeconds / 3600);
            const mins = Math.floor((totalSeconds % 3600) / 60);
            const secs = Math.floor(totalSeconds % 60);
            
            if (hours > 0) {
                return `${hours}:${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
            }
            return `${mins}:${secs.toString().padStart(2, '0')}`;
        }
        
        // 格式化配速 (分鐘/公里轉 m:ss)
        function formatPace(pace) {
            const minutes = Math.floor(pace);
            const seconds = Math.floor((pace - minutes) * 60);
            return `${minutes}:${seconds.toString().padStart(2, '0')}`;
        }
    </script>
</body>
</html>
